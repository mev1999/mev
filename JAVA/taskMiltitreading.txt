package com.javarush.task.task28.task2806;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

/* 
?????????? ? Executors
1. ? ?????? main ?????? ????????????? ??? ?? 5 ?????? ????????? ????? Executors.
2. ? ????? ??????? ?? ?????????? ? ??? 10 ????? Runnable.
3. ? ?????? ?????? ? ?????? run ?????? ????? doExpensiveOperation ? ?????????? ??????? ?????? ??????? ? 1, ??. ?????? ??????.
4. ??????? ?????????? ????? ????? ?? ?????????? ? ??? (????? shutdown).
5. ??? ???? 5 ?????? ?? ?????????? ???? ????? (????? awaitTermination ? ???????? TimeUnit.SECONDS).


??????????:
1. ????????? ????? Executors, ?????? ? ?????? main ????????????? ??? ?? 5 ??????.
2. ??? ?????? ????????? ?? ?????????? 10 ????? Runnable.
3. ?????? ?????? ?????? ???????? ????? doExpensiveOperation ? ?????????? ??????? ??????, ??????? ? 1.
4. ??????? ?????????? ????? ????? ?? ?????????? ? ???.
5. ?? ?????????? ???? ????? ? ???? ????? ?????????? 5 ??????.
*/
public class Solution {
    public static void main(String[] args) throws InterruptedException {
        //Add your code here
        ExecutorService service = Executors.newFixedThreadPool(5);

        for(int i = 0; i < 10; i++)
        {
            int finalI = i+1;
            service.submit(new Runnable() {
                public void run()
                {
                    // ??? ?? ????????? ???-?? ??????? ?? ?????????.
                    doExpensiveOperation(finalI);
                }
            });
        }
        service.shutdown();
        service.awaitTermination(5,TimeUnit.SECONDS);

        /* output example
pool-1-thread-2, localId=2
pool-1-thread-1, localId=1
pool-1-thread-3, localId=3
pool-1-thread-1, localId=7
pool-1-thread-1, localId=9
pool-1-thread-4, localId=4
pool-1-thread-5, localId=5
pool-1-thread-2, localId=6
pool-1-thread-1, localId=10
pool-1-thread-3, localId=8
         */
    }

    private static void doExpensiveOperation(int localId) {
        System.out.println(Thread.currentThread().getName() + ", localId="+localId);
    }
}
